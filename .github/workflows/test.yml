name: Create Release
on:
  pull_request:
    branches:
      - main
    types: [closed]
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check latest tag
        uses: actions/github-script@v4
        id: latest-tag
        with:
          script: |
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const latestRelease = releases.data[0].tag_name;
            return latestRelease;
      - name: Generate new tag name
        uses: actions/github-script@v4
        id: new_tag
        with:
          script: |
            const latestRelease = ${{steps.latest-tag.outputs.result}}
            const jstNow = new Date(Date.now() + ((new Date().getTimezoneOffset() + (9 * 60)) * 60 * 1000));
            const year = jstNow.getFullYear();
            const month = ('00'+(jstNow.getMonth() + 1)).slice(-2);
            const day = ('00'+jstNow.getDate()).slice(-2);
            const today = `${year}${month}${day}`;
            const major = 1;
            const minor = today;
            let patch;
            if (latestRelease.includes(today)) {
              patch = Number(latestRelease.split('.')[2]) + 1;
            } else {
              patch = 1;
            }
            const newVersion = [major,minor,patch].join('.');
            return newVersion;
      - name: Create tag and release
        uses: actions/github-script@v4
        id: create_tag_and_release
        with:
          script: |
            const newVersion = ${{steps.new_tag.outputs.result}};
            const releaseBody = '#' + context.payload.pull_request.number + ' ' + context.payload.pull_request.title
            const response = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newVersion,
              name: newVersion,
              body: releaseBody,
              draft: false,
              prerelease: false
            });
            return response.data.html_url;
      - name: Create jira release
        id: create_jira_release
        uses: RyoichiNoguchi/jira-action@v1.0.0
        with:
          username: ${{ secrets.JRIA_USERNAME }}
          password: ${{ secrets.JIRA_PASSWORD }}
          domain: ${{ secrets.JIRA_DOMAIN }}
          projectId: ${{ secrets.JIRA_PROJECT_ID }}
          releaseName: ${{steps.new_tag.outputs.result}}
          description: ${{steps.create_tag_and_release.outputs.result}}
          issueKeyText: ${{ secrets.TEST_KEY_TEXT }}
